package com.it.exercise.domain.services;

import com.it.exercise.domain.AccountType;
import com.it.exercise.domain.accounts.*;
import com.it.exercise.exceptions.InvalidAccountException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Created by TechTalks on 1/14/2018.
 */
public class AccountServices {

    static List<Account> accountRepository = new ArrayList<>();

    public static void initialize() {
        accountRepository.clear();
    }

    public static Account create(AccountNumberGenerator accountNumberGenerator, AccountType accountType) {
        String autoGeneratedAccountNumber= accountNumberGenerator.generate();
        switch (accountType) {
            case SAVINGS:
                return new SavingsAccount(autoGeneratedAccountNumber, accountType);
            case MULTICURRENCY:
                return new MultiCurrencyAccount(autoGeneratedAccountNumber, accountType);
            case FIXED:
                return new FixedAccount(autoGeneratedAccountNumber,accountType);
            case CURRENT:
                return new CurrentAccount(autoGeneratedAccountNumber,accountType);
            default:
                throw new IllegalArgumentException();
        }
    }

    public static Account load(String destinationAccount) throws InvalidAccountException {
        Optional<Account> accountOptional = accountRepository.stream().filter(account -> account.getAccountNumber().equals(destinationAccount)).findFirst();
        if (accountOptional.isPresent())
            return accountOptional.get();
        else
            throw new InvalidAccountException();
    }

}
